name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
        
    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: your-app-repo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Pull latest image
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          docker pull ${{ steps.login-ecr.outputs.registry }}/your-app-repo:${{ github.sha }}
          
          # Create env file from secrets
          cat > .env << EOL
          DATABASE_URL="${{ secrets.DATABASE_URL }}"
          DIRECT_URL="${{ secrets.DIRECT_URL }}"
          PORT=8000
          BETTER_AUTH_URL="${{ secrets.BETTER_AUTH_URL }}"
          GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
          GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
          RESEND_API_KEY="${{ secrets.RESEND_API_KEY }}"
          BETTER_AUTH_SECRET="${{ secrets.BETTER_AUTH_SECRET }}"
          FRONTEND_APP_URL="${{ secrets.FRONTEND_APP_URL }}"
          EOL
          
          # Stop existing container if running
          docker stop express-app || true
          docker rm express-app || true
          
          # Run new container
          docker run -d \
            --name express-app \
            -p 8000:8000 \
            --env-file .env \
            --restart unless-stopped \
            ${{ steps.login-ecr.outputs.registry }}/your-app-repo:${{ github.sha }}
            
          # Clean up unused images
          docker system prune -f